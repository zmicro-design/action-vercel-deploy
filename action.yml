name: "Zmicro Vercel Deploy"
description: "github action for vercel deploy"
author: "Zero <GitHub: whatwewant>"
branding:
  icon: "cloud-lightning"
  color: "green"
inputs:
  token:
    required: true
    description: "vercel token. You can get it from https://vercel.com/account/tokens"
  org-id:
    required: false
    description: "vercel organization id. See project settings page -> General -> Team ID"
  project-id:
    required: false
    description: "vercel project id. See project settings page -> General -> Project ID"
  environment:
    required: false
    description: "vercel deployment environment"
    default: preview
  git-branch:
    required: false
    description: "vercel git branch for pulling"
    # default: ${{ github.head_ref || github.ref_name }}
  deploy-archive:
    required: false
    description: "vercel deploy to compress the deployment code into an archive before uploading it"

outputs:
  preview-url:
    description: "preview url"
    value: ${{ steps.deploy.outputs.preview-url }}

runs:
  using: composite
  steps:
    - name: Set up Zmicro
      uses: zmicro-design/action-setup-zmicro@v1

    # - name: Set up Pipeline
    #   shell: bash
    #   run: zmicro package install pipeline

    - name: Vercel Prepare
      shell: bash
      run: |
        which npm > /dev/null 2>&1
        if [ $? -ne 0 ]; then
          echo "npm not found, please check your node installation"
          exit 1
        fi

        npm i -g vercel

    - name: Vercel Deploy
      shell: bash
      id: deploy
      env:
        VERCEL_TOKEN: ${{ inputs.token }}
        VERCEL_ORG_ID: ${{ inputs.org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.project-id }}
        VERCEL_ENVIRONMENT: ${{ inputs.environment }}
        VERCEL_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}
        VERCEL_GIT_BRANCH: ${{ inputs.git-branch }}
        VERCEL_DEPLOY_ARCHIVE: ${{ inputs.deploy-archive }}
      run: |
        LOG_INFO() {
          echo -e "\033[32m[$(date)] $1\033[0m"
        }

        LOG_ERROR() {
          echo -e "\033[31m[$(date)] $1\033[0m"
        }

        PULL_ARGS="--yes --token=$VERCEL_TOKEN"
        BUILD_ARGS="--yes --token=$VERCEL_TOKEN"
        DEPLOY_ARGS="--yes --token=$VERCEL_TOKEN --prebuilt"

        ###### PULL ARGS ######
        if [ -n "$VERCEL_ENVIRONMENT" ]; then
          PULL_ARGS="$PULL_ARGS --environment=$VERCEL_ENVIRONMENT"
        fi
        if [ -n "$VERCEL_DEBUG" ]; then
          PULL_ARGS="$PULL_ARGS --debug"
        fi
        if [ -n "$VERCEL_GIT_BRANCH" ]; then
          PULL_ARGS="$PULL_ARGS --git-branch=$VERCEL_GIT_BRANCH"
        fi

        ###### BUILD ARGS ######
        if [ -n "$VERCEL_DEBUG" ]; then
          BUILD_ARGS="$BUILD_ARGS --debug"
        fi

        ###### DEPLOY ARGS ######
        if [ -n "$VERCEL_DEBUG" ]; then
          DEPLOY_ARGS="$DEPLOY_ARGS --debug"
        fi
        if [ -n "$VERCEL_DEPLOY_ARCHIVE" ]; then
          DEPLOY_ARGS="$DEPLOY_ARGS --archive=tgz"
        fi

        LOG_INFO "Pulling Vercel environment ..."
        vercel pull $PULL_ARGS 2>&1
        if [ $? -ne 0 ]; then
          LOG_ERROR "Failed to pull Vercel environment."
          exit 1
        fi

        LOG_INFO "Building Vercel project ..."
        vercel build $BUILD_ARGS 2>&1
        if [ $? -ne 0 ]; then
          LOG_ERROR "Failed to build Vercel project."
          exit 1
        fi

        LOG_INFO "Deploying Vercel project ..."
        url=$(vercel deploy $DEPLOY_ARGS)
        exit_code=$?
        if [ $exit_code -ne 0 ]; then
          LOG_ERROR "Failed to deploy Vercel project."
          exit 1
        fi

        echo "preview-url=$url" >> $GITHUB_OUTPUT

    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          // Check if this is a pull request context
          const isPR = context.eventName === 'pull_request' || 
                      context.payload.pull_request !== undefined ||
                      context.issue?.pull_request !== undefined
          if (!isPR) {
            console.log('Not a pull request context, skipping comment.')
            return
          }

          // Get PR number
          const prNumber = context.issue.number || 
                          context.payload.pull_request?.number ||
                          context.payload.number
          if (!prNumber) {
            console.log('Could not determine PR number, skipping comment.')
            return
          }

          const previewUrl = '${{ steps.deploy.outputs.preview-url }}'

          const commentIdentifier = '<!-- zmicro-design-action-vercel-deploy-comment -->'
          const commentBody = `${commentIdentifier}
          ## 🚀 Vercel Deployment

          ✅ **Preview URL**: ${previewUrl}

          👤 **Author**: \`${{ github.actor }}\`
          📝 **Commit**: \`${{ github.sha }}\`
          🌿 **Branch**: \`${{ github.head_ref || github.ref_name }}\`
          ⏰ **Updated**: ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC`

          try {
            // Get all comments for this PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            })

            // Find existing comment with our identifier
            const existingComment = comments.find(comment => 
              comment.body.includes(commentIdentifier)
            )

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              })
              console.log(`Updated existing comment #${existingComment.id}`)
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              })
              console.log('Created new comment')
            }
          } catch (error) {
            console.error('Failed to handle PR comment:', error.message)
            // Don't fail the workflow if comment handling fails
          }
